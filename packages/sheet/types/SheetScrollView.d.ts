/// <reference types="react" />
import { ScrollView as RNScrollView } from 'react-native';
export declare const SheetScrollView: import("react").ForwardRefExoticComponent<{} & {
    [x: `$${string}`]: import("@tamagui/core").WithThemeShorthandsAndPseudos<import("@tamagui/core").StackStylePropsBase> | undefined;
    [x: `$${string}` & `$${number}`]: import("@tamagui/core").WithThemeShorthandsAndPseudos<import("@tamagui/core").StackStylePropsBase> | undefined;
    [x: `$${string}` & `$theme-${string}`]: import("@tamagui/core").WithThemeShorthandsAndPseudos<import("@tamagui/core").StackStylePropsBase> | undefined;
    [x: `$${string}` & `$theme-${string}` & `$theme-${number}`]: import("@tamagui/core").WithThemeShorthandsAndPseudos<import("@tamagui/core").StackStylePropsBase> | undefined;
    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    pointerEvents?: "none" | "box-none" | "box-only" | "auto" | undefined;
    display?: "flex" | "unset" | "none" | "inherit" | "inline" | "block" | "contents" | "inline-flex" | undefined;
    children?: import("react").ReactNode;
    onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
    focusable?: boolean | undefined;
    onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    hitSlop?: import("react-native").Insets | undefined;
    id?: string | undefined;
    removeClippedSubviews?: boolean | undefined;
    testID?: string | undefined;
    nativeID?: string | undefined;
    collapsable?: boolean | undefined;
    needsOffscreenAlphaCompositing?: boolean | undefined;
    renderToHardwareTextureAndroid?: boolean | undefined;
    shouldRasterizeIOS?: boolean | undefined;
    isTVSelectable?: boolean | undefined;
    hasTVPreferredFocus?: boolean | undefined;
    tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
    tvParallaxShiftDistanceX?: number | undefined;
    tvParallaxShiftDistanceY?: number | undefined;
    tvParallaxTiltAngle?: number | undefined;
    tvParallaxMagnification?: number | undefined;
    onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onPointerEnter?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerEnterCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerLeave?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerLeaveCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerMove?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerMoveCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerCancel?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerCancelCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerDown?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerDownCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerUp?: ((event: import("react-native").PointerEvent) => void) | undefined;
    onPointerUpCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: string;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    "aria-label"?: string | undefined;
    accessibilityRole?: import("react-native").AccessibilityRole | undefined;
    accessibilityState?: import("react-native").AccessibilityState | undefined;
    "aria-busy"?: boolean | undefined;
    "aria-checked"?: boolean | "mixed" | undefined;
    "aria-disabled"?: boolean | undefined;
    "aria-expanded"?: boolean | undefined;
    "aria-selected"?: boolean | undefined;
    "aria-labelledby"?: string | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native").AccessibilityValue | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
    importantForAccessibility?: "auto" | "no" | "yes" | "no-hide-descendants" | undefined;
    "aria-hidden"?: boolean | undefined;
    "aria-live"?: "off" | "polite" | "assertive" | undefined;
    "aria-modal"?: boolean | undefined;
    role?: import("react-native").Role | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    accessibilityLabelledBy?: string | string[] | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
    accessibilityLanguage?: string | undefined;
    target?: string | undefined;
    asChild?: boolean | "web" | "except-style" | "except-style-web" | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    debug?: import("@tamagui/core").DebugProp | undefined;
    disabled?: boolean | undefined;
    className?: string | undefined;
    themeShallow?: boolean | undefined;
    themeInverse?: boolean | undefined;
    tag?: "object" | "a" | "abbr" | "address" | "area" | "article" | "aside" | "audio" | "b" | "bdi" | "bdo" | "blockquote" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "footer" | "form" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "header" | "hr" | "i" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "menu" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "picture" | "pre" | "progress" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "search" | "section" | "select" | "small" | "source" | "span" | "strong" | "sub" | "summary" | "sup" | "table" | "tbody" | "td" | "template" | "textarea" | "th" | "thead" | "time" | "tr" | "track" | "u" | "ul" | "var" | "video" | "wbr" | "param" | (string & {}) | "rtc" | undefined;
    theme?: string | null | undefined;
    group?: undefined;
    untilMeasured?: "hide" | "show" | undefined;
    componentName?: string | undefined;
    tabIndex?: string | number | undefined;
    disableOptimization?: boolean | undefined;
    forceStyle?: "hover" | "press" | "focus" | undefined;
    disableClassName?: boolean | undefined;
    onFocus?: ((event: import("react").FocusEvent<HTMLDivElement, Element>) => void) | undefined;
    onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    onPress?: ((event: import("react-native").GestureResponderEvent) => void) | null | undefined;
    onLongPress?: ((event: import("react-native").GestureResponderEvent) => void) | null | undefined;
    onPressIn?: ((event: import("react-native").GestureResponderEvent) => void) | null | undefined;
    onPressOut?: ((event: import("react-native").GestureResponderEvent) => void) | null | undefined;
    onHoverIn?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
    onHoverOut?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
    onBlur?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
    backfaceVisibility?: "hidden" | "unset" | "visible" | undefined;
    backgroundColor?: "unset" | import("@tamagui/core").GetThemeValueForKey<"backgroundColor"> | import("react-native").OpaqueColorValue | undefined;
    borderBlockColor?: "unset" | import("react-native").OpaqueColorValue | import("@tamagui/core").GetThemeValueForKey<"borderBlockColor"> | undefined;
    borderBlockEndColor?: "unset" | import("react-native").OpaqueColorValue | import("@tamagui/core").GetThemeValueForKey<"borderBlockEndColor"> | undefined;
    borderBlockStartColor?: "unset" | import("react-native").OpaqueColorValue | import("@tamagui/core").GetThemeValueForKey<"borderBlockStartColor"> | undefined;
    borderBottomColor?: "unset" | import("react-native").OpaqueColorValue | import("@tamagui/core").GetThemeValueForKey<"borderBottomColor"> | undefined;
    borderBottomEndRadius?: number | `$${string}` | `$${number}` | "unset" | import("react-native").Animated.AnimatedNode | `$${string}.${string}` | `$${string}.${number}` | import("@tamagui/core").UnionableNumber | import("@tamagui/core").UnionableString | import("@tamagui/core").Variable<any> | undefined;
    borderBottomLeftRadius?: number | `$${string}` | `$${number}` | "unset" | import("react-native").Animated.AnimatedNode | `$${string}.${string}` | `$${string}.${number}` | import("@tamagui/core").UnionableNumber | import("@tamagui/core").UnionableString | import("@tamagui/core").Variable<any> | undefined;
    borderBottomRightRadius?: number | `$${string}` | `$${number}` | "unset" | import("react-native").Animated.AnimatedNode | `$${string}.${string}` | `$${string}.${number}` | import("@tamagui/core").UnionableNumber | import("@tamagui/core").UnionableString | import("@tamagui/core").Variable<any> | undefined;
    borderBottomStartRadius?: number | `$${string}` | `$${number}` | "unset" | import("react-native").Animated.AnimatedNode | `$${string}.${string}` | `$${string}.${number}` | import("@tamagui/core").UnionableNumber | import("@tamagui/core").UnionableString | import("@tamagui/core").Variable<any> | undefined;
    borderColor?: "unset" | import("react-native").OpaqueColorValue | import("@tamagui/core").GetThemeValueForKey<"borderColor"> | undefined;
    borderCurve?: "unset" | "circular" | "continuous" | undefined;
    borderEndColor?: import("react-native").ColorValue | undefined;
    borderEndEndRadius?: number | `$${string}` | `$${number}` | "unset" | import("react-native").Animated.AnimatedNode | `$${string}.${string}` | `$${string}.${number}` | import("@tamagui/core").UnionableNumber | import("@tamagui/core").UnionableString | import("@tamagui/core").Variable<any> | undefined;
    borderEndStartRadius?: number | `$${string}` | `$${number}` | "unset" | import("react-native").Animated.AnimatedNode | `$${string}.${string}` | `$${string}.${number}` | import("@tamagui/core").UnionableNumber | import("@tamagui/core").UnionableString | import("@tamagui/core").Variable<any> | undefined;
    borderLeftColor?: "unset" | import("react-native").OpaqueColorValue | import("@tamagui/core").GetThemeValueForKey<"borderLeftColor"> | undefined;
    borderRadius?: number | `$${string}` | `$${number}` | "unset" | import("react-native").Animated.AnimatedNode | `$${string}.${string}` | `$${string}.${number}` | import("@tamagui/core").UnionableNumber | import("@tamagui/core").UnionableString | import("@tamagui/core").Variable<any> | undefined;
    borderRightColor?: "unset" | import("react-native").OpaqueColorValue | import("@tamagui/core").GetThemeValueForKey<"borderRightColor"> | undefined;
    borderStartColor?: import("react-native").ColorValue | undefined;
    borderStartEndRadius?: number | `$${string}` | `$${number}` | "unset" | import("react-native").Animated.AnimatedNode | `$${string}.${string}` | `$${string}.${number}` | import("@tamagui/core").UnionableNumber | import("@tamagui/core").UnionableString | import("@tamagui/core").Variable<any> | undefined;
    borderStartStartRadius?: number | `$${string}` | `$${number}` | "unset" | import("react-native").Animated.AnimatedNode | `$${string}.${string}` | `$${string}.${number}` | import("@tamagui/core").UnionableNumber | import("@tamagui/core").UnionableString | import("@tamagui/core").Variable<any> | undefined;
    borderStyle?: "unset" | "solid" | "dotted" | "dashed" | undefined;
    borderTopColor?: "unset" | import("react-native").OpaqueColorValue | import("@tamagui/core").GetThemeValueForKey<"borderTopColor"> | undefined;
    borderTopEndRadius?: number | `$${string}` | `$${number}` | "unset" | import("react-native").Animated.AnimatedNode | `$${string}.${string}` | `$${string}.${number}` | import("@tamagui/core").UnionableNumber | import("@tamagui/core").UnionableString | import("@tamagui/core").Variable<any> | undefined;
    borderTopLeftRadius?: number | `$${string}` | `$${number}` | "unset" | import("react-native").Animated.AnimatedNode | `$${string}.${string}` | `$${string}.${number}` | import("@tamagui/core").UnionableNumber | import("@tamagui/core").UnionableString | import("@tamagui/core").Variable<any> | undefined;
    borderTopRightRadius?: number | `$${string}` | `$${number}` | "unset" | import("react-native").Animated.AnimatedNode | `$${string}.${string}` | `$${string}.${number}` | import("@tamagui/core").UnionableNumber | import("@tamagui/core").UnionableString | import("@tamagui/core").Variable<any> | undefined;
    borderTopStartRadius?: number | `$${string}` | `$${number}` | "unset" | import("react-native").Animated.AnimatedNode | `$${string}.${string}` | `$${string}.${number}` | import("@tamagui/core").UnionableNumber | import("@tamagui/core").UnionableString | import("@tamagui/core").Variable<any> | undefined;
    opacity?: "unset" | import("react-native").AnimatableNumericValue | undefined;
    alignContent?: "center" | "unset" | "flex-start" | "flex-end" | "stretch" | "space-between" | "space-around" | undefined;
    alignItems?: "unset" | import("react-native").FlexAlignType | undefined;
    alignSelf?: "unset" | "auto" | import("react-native").FlexAlignType | undefined;
    aspectRatio?: string | number | undefined;
    borderBottomWidth?: number | "unset" | import("@tamagui/core").GetThemeValueForKey<"borderBottomWidth"> | undefined;
    borderEndWidth?: number | "unset" | import("@tamagui/core").GetThemeValueForKey<"borderEndWidth"> | undefined;
    borderLeftWidth?: number | "unset" | import("@tamagui/core").GetThemeValueForKey<"borderLeftWidth"> | undefined;
    borderRightWidth?: number | "unset" | import("@tamagui/core").GetThemeValueForKey<"borderRightWidth"> | undefined;
    borderStartWidth?: number | "unset" | import("@tamagui/core").GetThemeValueForKey<"borderStartWidth"> | undefined;
    borderTopWidth?: number | "unset" | import("@tamagui/core").GetThemeValueForKey<"borderTopWidth"> | undefined;
    borderWidth?: number | "unset" | import("@tamagui/core").GetThemeValueForKey<"borderWidth"> | undefined;
    bottom?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"bottom"> | null | undefined;
    end?: "unset" | import("react-native").DimensionValue | undefined;
    flex?: number | "unset" | undefined;
    flexBasis?: "unset" | import("react-native").DimensionValue | undefined;
    flexDirection?: "unset" | "row" | "column" | "row-reverse" | "column-reverse" | undefined;
    rowGap?: number | "unset" | import("@tamagui/core").GetThemeValueForKey<"rowGap"> | undefined;
    gap?: number | "unset" | import("@tamagui/core").GetThemeValueForKey<"gap"> | undefined;
    columnGap?: number | "unset" | import("@tamagui/core").GetThemeValueForKey<"columnGap"> | undefined;
    flexGrow?: number | "unset" | undefined;
    flexShrink?: number | "unset" | undefined;
    flexWrap?: "unset" | "wrap" | "nowrap" | "wrap-reverse" | undefined;
    height?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"height"> | null | undefined;
    justifyContent?: "center" | "unset" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | undefined;
    left?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"left"> | null | undefined;
    margin?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"margin"> | null | undefined;
    marginBottom?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"marginBottom"> | null | undefined;
    marginEnd?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"marginEnd"> | null | undefined;
    marginHorizontal?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"marginHorizontal"> | null | undefined;
    marginLeft?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"marginLeft"> | null | undefined;
    marginRight?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"marginRight"> | null | undefined;
    marginStart?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"marginStart"> | null | undefined;
    marginTop?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"marginTop"> | null | undefined;
    marginVertical?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"marginVertical"> | null | undefined;
    maxHeight?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"maxHeight"> | null | undefined;
    maxWidth?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"maxWidth"> | null | undefined;
    minHeight?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"minHeight"> | null | undefined;
    minWidth?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"minWidth"> | null | undefined;
    overflow?: "hidden" | "unset" | "visible" | "scroll" | undefined;
    padding?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"padding"> | null | undefined;
    paddingBottom?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"paddingBottom"> | null | undefined;
    paddingEnd?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"paddingEnd"> | null | undefined;
    paddingHorizontal?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"paddingHorizontal"> | null | undefined;
    paddingLeft?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"paddingLeft"> | null | undefined;
    paddingRight?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"paddingRight"> | null | undefined;
    paddingStart?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"paddingStart"> | null | undefined;
    paddingTop?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"paddingTop"> | null | undefined;
    paddingVertical?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"paddingVertical"> | null | undefined;
    position?: "absolute" | "unset" | "relative" | undefined;
    right?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"right"> | null | undefined;
    start?: "unset" | import("react-native").DimensionValue | undefined;
    top?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"top"> | null | undefined;
    width?: number | "unset" | import("react-native").Animated.AnimatedNode | import("@tamagui/core").GetThemeValueForKey<"width"> | null | undefined;
    zIndex?: "unset" | import("@tamagui/core").GetThemeValueForKey<"zIndex"> | undefined;
    direction?: "unset" | "inherit" | "ltr" | "rtl" | undefined;
    shadowColor?: "unset" | import("react-native").OpaqueColorValue | import("@tamagui/core").GetThemeValueForKey<"shadowColor"> | undefined;
    shadowOffset?: "unset" | import("@tamagui/core").GetThemeValueForKey<"shadowOffset"> | Readonly<{
        width: number;
        height: number;
    }> | undefined;
    shadowOpacity?: "unset" | import("react-native").AnimatableNumericValue | undefined;
    shadowRadius?: number | "unset" | import("@tamagui/core").GetThemeValueForKey<"shadowRadius"> | undefined;
    transform?: string | (import("react-native").PerpectiveTransform | import("react-native").RotateTransform | import("react-native").RotateXTransform | import("react-native").RotateYTransform | import("react-native").RotateZTransform | import("react-native").ScaleTransform | import("react-native").ScaleXTransform | import("react-native").ScaleYTransform | import("react-native").TranslateXTransform | import("react-native").TranslateYTransform | import("react-native").SkewXTransform | import("react-native").SkewYTransform | import("react-native").MatrixTransform)[] | undefined;
    transformMatrix?: number[] | "unset" | undefined;
    rotation?: "unset" | import("react-native").AnimatableNumericValue | undefined;
    scaleX?: "unset" | import("react-native").AnimatableNumericValue | import("@tamagui/core").GetThemeValueForKey<"scaleX"> | undefined;
    scaleY?: "unset" | import("react-native").AnimatableNumericValue | import("@tamagui/core").GetThemeValueForKey<"scaleY"> | undefined;
    translateX?: "unset" | import("react-native").AnimatableNumericValue | undefined;
    translateY?: "unset" | import("react-native").AnimatableNumericValue | undefined;
    x?: number | "unset" | import("@tamagui/core").GetThemeValueForKey<"x"> | undefined;
    y?: number | "unset" | import("@tamagui/core").GetThemeValueForKey<"y"> | undefined;
    perspective?: number | "unset" | undefined;
    scale?: number | "unset" | import("@tamagui/core").GetThemeValueForKey<"scale"> | undefined;
    skewX?: string | undefined;
    skewY?: string | undefined;
    matrix?: number[] | "unset" | undefined;
    rotate?: string | undefined;
    rotateY?: string | undefined;
    rotateX?: string | undefined;
    rotateZ?: string | undefined;
    contain?: import("csstype").Property.Contain | undefined;
    touchAction?: import("csstype").Property.TouchAction | undefined;
    cursor?: import("csstype").Property.Cursor | undefined;
    outlineColor?: "unset" | import("@tamagui/core").GetThemeValueForKey<"outlineColor"> | undefined;
    outlineOffset?: "unset" | import("@tamagui/core").SpaceValue | undefined;
    outlineStyle?: import("csstype").Property.OutlineStyle | undefined;
    outlineWidth?: "unset" | import("@tamagui/core").SpaceValue | undefined;
    space?: number | "unset" | import("@tamagui/core").GetThemeValueForKey<"space"> | undefined;
    spaceDirection?: "unset" | import("@tamagui/core").SpaceDirection | undefined;
    separator?: import("react").ReactNode;
    animation?: import("@tamagui/core").AnimationProp | null | undefined;
    animateOnly?: string[] | "unset" | undefined;
    userSelect?: import("csstype").Property.UserSelect | undefined;
    transformOrigin?: "bottom" | "left" | "right" | "top" | "center" | "unset" | (`${string}%` | `${number}%` | `${string}px` | `${number}px`) | "left bottom" | "left top" | "left center" | `left ${string}%` | `left ${number}%` | `left ${string}px` | `left ${number}px` | "right bottom" | "right top" | "right center" | `right ${string}%` | `right ${number}%` | `right ${string}px` | `right ${number}px` | "center bottom" | "center top" | "center center" | `center ${string}%` | `center ${number}%` | `center ${string}px` | `center ${number}px` | `${string}% bottom` | `${string}% top` | `${string}% center` | `${string}% ${string}%` | `${string}% ${number}%` | `${string}% ${string}px` | `${string}% ${number}px` | `${number}% bottom` | `${number}% top` | `${number}% center` | `${number}% ${string}%` | `${number}% ${number}%` | `${number}% ${string}px` | `${number}% ${number}px` | `${string}px bottom` | `${string}px top` | `${string}px center` | `${string}px ${string}%` | `${string}px ${number}%` | `${string}px ${string}px` | `${string}px ${number}px` | `${number}px bottom` | `${number}px top` | `${number}px center` | `${number}px ${string}%` | `${number}px ${number}%` | `${number}px ${string}px` | `${number}px ${number}px` | `left bottom ${string}px` | `left bottom ${number}px` | `left top ${string}px` | `left top ${number}px` | `left center ${string}px` | `left center ${number}px` | `left ${string}% ${string}px` | `left ${string}% ${number}px` | `left ${number}% ${string}px` | `left ${number}% ${number}px` | `left ${string}px ${string}px` | `left ${string}px ${number}px` | `left ${number}px ${string}px` | `left ${number}px ${number}px` | `right bottom ${string}px` | `right bottom ${number}px` | `right top ${string}px` | `right top ${number}px` | `right center ${string}px` | `right center ${number}px` | `right ${string}% ${string}px` | `right ${string}% ${number}px` | `right ${number}% ${string}px` | `right ${number}% ${number}px` | `right ${string}px ${string}px` | `right ${string}px ${number}px` | `right ${number}px ${string}px` | `right ${number}px ${number}px` | `center bottom ${string}px` | `center bottom ${number}px` | `center top ${string}px` | `center top ${number}px` | `center center ${string}px` | `center center ${number}px` | `center ${string}% ${string}px` | `center ${string}% ${number}px` | `center ${number}% ${string}px` | `center ${number}% ${number}px` | `center ${string}px ${string}px` | `center ${string}px ${number}px` | `center ${number}px ${string}px` | `center ${number}px ${number}px` | `${string}% bottom ${string}px` | `${string}% bottom ${number}px` | `${string}% top ${string}px` | `${string}% top ${number}px` | `${string}% center ${string}px` | `${string}% center ${number}px` | `${string}% ${string}% ${string}px` | `${string}% ${string}% ${number}px` | `${string}% ${number}% ${string}px` | `${string}% ${number}% ${number}px` | `${string}% ${string}px ${string}px` | `${string}% ${string}px ${number}px` | `${string}% ${number}px ${string}px` | `${string}% ${number}px ${number}px` | `${number}% bottom ${string}px` | `${number}% bottom ${number}px` | `${number}% top ${string}px` | `${number}% top ${number}px` | `${number}% center ${string}px` | `${number}% center ${number}px` | `${number}% ${string}% ${string}px` | `${number}% ${string}% ${number}px` | `${number}% ${number}% ${string}px` | `${number}% ${number}% ${number}px` | `${number}% ${string}px ${string}px` | `${number}% ${string}px ${number}px` | `${number}% ${number}px ${string}px` | `${number}% ${number}px ${number}px` | `${string}px bottom ${string}px` | `${string}px bottom ${number}px` | `${string}px top ${string}px` | `${string}px top ${number}px` | `${string}px center ${string}px` | `${string}px center ${number}px` | `${string}px ${string}% ${string}px` | `${string}px ${string}% ${number}px` | `${string}px ${number}% ${string}px` | `${string}px ${number}% ${number}px` | `${string}px ${string}px ${string}px` | `${string}px ${string}px ${number}px` | `${string}px ${number}px ${string}px` | `${string}px ${number}px ${number}px` | `${number}px bottom ${string}px` | `${number}px bottom ${number}px` | `${number}px top ${string}px` | `${number}px top ${number}px` | `${number}px center ${string}px` | `${number}px center ${number}px` | `${number}px ${string}% ${string}px` | `${number}px ${string}% ${number}px` | `${number}px ${number}% ${string}px` | `${number}px ${number}% ${number}px` | `${number}px ${string}px ${string}px` | `${number}px ${string}px ${number}px` | `${number}px ${number}px ${string}px` | `${number}px ${number}px ${number}px` | undefined;
    hoverStyle?: (import("@tamagui/core").WithThemeValues<import("@tamagui/core").StackStylePropsBase> & import("@tamagui/core").WithShorthands<import("@tamagui/core").WithThemeValues<import("@tamagui/core").StackStylePropsBase>>) | null | undefined;
    pressStyle?: (import("@tamagui/core").WithThemeValues<import("@tamagui/core").StackStylePropsBase> & import("@tamagui/core").WithShorthands<import("@tamagui/core").WithThemeValues<import("@tamagui/core").StackStylePropsBase>>) | null | undefined;
    focusStyle?: (import("@tamagui/core").WithThemeValues<import("@tamagui/core").StackStylePropsBase> & import("@tamagui/core").WithShorthands<import("@tamagui/core").WithThemeValues<import("@tamagui/core").StackStylePropsBase>>) | null | undefined;
    exitStyle?: (import("@tamagui/core").WithThemeValues<import("@tamagui/core").StackStylePropsBase> & import("@tamagui/core").WithShorthands<import("@tamagui/core").WithThemeValues<import("@tamagui/core").StackStylePropsBase>>) | null | undefined;
    enterStyle?: (import("@tamagui/core").WithThemeValues<import("@tamagui/core").StackStylePropsBase> & import("@tamagui/core").WithShorthands<import("@tamagui/core").WithThemeValues<import("@tamagui/core").StackStylePropsBase>>) | null | undefined;
    horizontal?: boolean | null | undefined;
    contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    decelerationRate?: number | "fast" | "normal" | undefined;
    invertStickyHeaders?: boolean | undefined;
    keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
    keyboardShouldPersistTaps?: boolean | "always" | "never" | "handled" | undefined;
    onContentSizeChange?: ((w: number, h: number) => void) | undefined;
    onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    pagingEnabled?: boolean | undefined;
    scrollEnabled?: boolean | undefined;
    showsHorizontalScrollIndicator?: boolean | undefined;
    showsVerticalScrollIndicator?: boolean | undefined;
    stickyHeaderHiddenOnScroll?: boolean | undefined;
    refreshControl?: import("react").ReactElement<import("react-native").RefreshControlProps, string | import("react").JSXElementConstructor<any>> | undefined;
    snapToInterval?: number | undefined;
    snapToOffsets?: number[] | undefined;
    snapToStart?: boolean | undefined;
    snapToEnd?: boolean | undefined;
    stickyHeaderIndices?: number[] | undefined;
    disableIntervalMomentum?: boolean | undefined;
    disableScrollViewPanResponder?: boolean | undefined;
    StickyHeaderComponent?: import("react").ComponentType<any> | undefined;
    alwaysBounceHorizontal?: boolean | undefined;
    alwaysBounceVertical?: boolean | undefined;
    automaticallyAdjustContentInsets?: boolean | undefined;
    automaticallyAdjustKeyboardInsets?: boolean | undefined;
    automaticallyAdjustsScrollIndicatorInsets?: boolean | undefined;
    bounces?: boolean | undefined;
    bouncesZoom?: boolean | undefined;
    canCancelContentTouches?: boolean | undefined;
    centerContent?: boolean | undefined;
    contentInset?: import("react-native").Insets | undefined;
    contentOffset?: import("react-native").PointProp | undefined;
    contentInsetAdjustmentBehavior?: "always" | "never" | "automatic" | "scrollableAxes" | undefined;
    directionalLockEnabled?: boolean | undefined;
    indicatorStyle?: "black" | "white" | "default" | undefined;
    maintainVisibleContentPosition?: {
        autoscrollToTopThreshold?: number | null | undefined;
        minIndexForVisible: number;
    } | null | undefined;
    maximumZoomScale?: number | undefined;
    minimumZoomScale?: number | undefined;
    onScrollAnimationEnd?: (() => void) | undefined;
    pinchGestureEnabled?: boolean | undefined;
    scrollEventThrottle?: number | undefined;
    scrollIndicatorInsets?: import("react-native").Insets | undefined;
    scrollToOverflowEnabled?: boolean | undefined;
    scrollsToTop?: boolean | undefined;
    snapToAlignment?: "end" | "start" | "center" | undefined;
    onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    zoomScale?: number | undefined;
    endFillColor?: import("react-native").ColorValue | undefined;
    scrollPerfTag?: string | undefined;
    overScrollMode?: "auto" | "always" | "never" | undefined;
    nestedScrollEnabled?: boolean | undefined;
    fadingEdgeLength?: number | undefined;
    persistentScrollbar?: boolean | undefined;
} & import("react").RefAttributes<RNScrollView>>;
//# sourceMappingURL=SheetScrollView.d.ts.map